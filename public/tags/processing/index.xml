<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Processing on Visualizing.JP</title>
        <link>http://localhost:1313/tags/processing/</link>
        <description>Recent content in Processing on Visualizing.JP</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ja-jp</language>
        <copyright>Yuichi Yazaki</copyright>
        <lastBuildDate>Mon, 24 Mar 2014 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/tags/processing/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>ビジュアライズにおける正規化</title>
        <link>http://localhost:1313/normalize-visualize/</link>
        <pubDate>Mon, 24 Mar 2014 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/normalize-visualize/</guid>
        <description>&lt;img src="http://localhost:1313/normalize-visualize/images/fi_Normalize.png" alt="Featured image of post ビジュアライズにおける正規化" /&gt;&lt;p&gt;たとえばある変数の値が350の場合、ある棒グラフではY座標はいくつになるでしょうか。またはあるバブルチャートでは円の直径はいくつになるでしょうか。&lt;/p&gt;
&lt;p&gt;インプットとしてのデータセットが持つ数値体系や幅（最小値〜最大値）などは、たいていアウトプット先の例えば液晶ディスプレイなどとは数値体系や幅（例えば表示領域など）が異なるため、両者をつなぐための方法論が必要になります。視覚化される要素の座標や大きさだけではなく、色や数値ではない例えばカテゴリーなどにも同様の手法が適用可能です。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/normalize-visualize/images/normalize-visualize_1.png&#34;
	width=&#34;432&#34;
	height=&#34;350&#34;
	srcset=&#34;http://localhost:1313/normalize-visualize/images/normalize-visualize_1_hu_9913f667b59374ed.png 480w, http://localhost:1313/normalize-visualize/images/normalize-visualize_1_hu_f979ceed01206a63.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;normalize-visualize_1&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;123&#34;
		data-flex-basis=&#34;296px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Processingではmap、D3ではscaleという機能でまとめられています。しかしここには「正規化」という概念が隠されています。正規化という言葉にはいくつかの意味があり、ここではベクトルにおける正規化のことを指します。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/normalize-visualize/images/normalize-visualize_2.png&#34;
	width=&#34;432&#34;
	height=&#34;350&#34;
	srcset=&#34;http://localhost:1313/normalize-visualize/images/normalize-visualize_2_hu_5735390571a65f9d.png 480w, http://localhost:1313/normalize-visualize/images/normalize-visualize_2_hu_8dd8e96b23f8ec7a.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;normalize-visualize_2&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;123&#34;
		data-flex-basis=&#34;296px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;その変数が含まれるデータセット全体（もしくは基準とすべき）最小値〜最大値の幅の中で、どの辺りにあるかを、0.0〜1.0の間で数値化します。そしてその値を表示のための値として再度変換します。&lt;/p&gt;
&lt;p&gt;前者を正規化(normalize)、後者を補間(interpolation)と呼ばれることが多いです。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/normalize-visualize/images/normalize-visualize_3.png&#34;
	width=&#34;432&#34;
	height=&#34;396&#34;
	srcset=&#34;http://localhost:1313/normalize-visualize/images/normalize-visualize_3_hu_11a57990072dff7c.png 480w, http://localhost:1313/normalize-visualize/images/normalize-visualize_3_hu_d0d4f6013398f20.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;normalize-visualize_3&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;109&#34;
		data-flex-basis=&#34;261px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;※P5&amp;hellip;ビジュアライズのためのフレームワークProcessingの略称。P5には他にもnormalize()やlerpColor()などの関数もありますがわかりやすさのために図からは省略しています。&lt;/p&gt;
&lt;p&gt;なんでこんなことをするのかというと、いくつか理由があげられます。&lt;/p&gt;
&lt;h3 id=&#34;１回正規化されたデータは様々な表示スタイルに利用可能&#34;&gt;１回正規化されたデータは、様々な表示スタイルに利用可能。
&lt;/h3&gt;&lt;p&gt;ユーザーインタラクションによって、表示領域の幅が変更されたり、レイアウトのフォーマットが棒グラフから地図へ変更されても、正規化されたデータは有効で、表示スタイルにあわせて補間して使えばよいです。補間というと語感的に少しわかりづらいですが、イメージ的には伸張とかレンダリングという言葉が近いかもしれません。&lt;/p&gt;
&lt;h3 id=&#34;異なるデータを同様に扱うことができる&#34;&gt;異なるデータを同様に扱うことができる。
&lt;/h3&gt;&lt;p&gt;いったん正規化という枠にはめることで、多様なデータを同様に扱うことができるようになります。たとえば統計データとセンサーが取得したデータを関連づけて表示することも可能になります。&lt;/p&gt;
&lt;h3 id=&#34;プログラムが生成する値との親和性&#34;&gt;プログラムが生成する値との親和性
&lt;/h3&gt;&lt;p&gt;プログラム内部で生成される乱数やパーリンノイズ、またサイン／コサインなど三角関数で生成される値なども正規化された値（0.0〜1.0）で用意されることが多いです。外部から取り込んだ数値も、プログラム内部で生成された数値も、同様に扱うことができるようになります。&lt;/p&gt;
&lt;h3 id=&#34;正規化と補間は正比例で入出力がなされるべきとは限らない&#34;&gt;正規化と補間は、正比例で入出力がなされるべきとは限らない。
&lt;/h3&gt;&lt;p&gt;描くグラフによって y=ax+b のような正比例、ではない関数を用いるものがあるためです。&lt;br&gt;
Processingの場合、組み込み関数ではおそらく正比例のみが用意されています。&lt;br&gt;
D3では統計学で必要なものが一通り用意されているので最適なものを選ぶことができます。一つのオブジェクトにつき正規化と補間で同じスケーリングの仕方が適用されます。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
